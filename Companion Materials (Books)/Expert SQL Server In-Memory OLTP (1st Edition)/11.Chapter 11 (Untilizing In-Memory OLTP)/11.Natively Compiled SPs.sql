/****************************************************************************/
/*                       Expert SQL Server In-Memory OLTP                   */
/*      APress. 1st Edition. ISBN-13:978-1484211373  ISBN-10:1484211375     */
/*                                                                          */
/*                  Written by Dmitri V. Korotkevitch                       */
/*                      http://aboutsqlserver.com                           */
/*                        dk@aboutsqlserver.com                             */
/****************************************************************************/
/*                 Chapter 11: Utilizing In-Memory OLTP                     */
/*           11.Evaluating Performance of Natively Compiled SPs             */
/****************************************************************************/

set nocount on
go

use InMemoryOLTP2014
go

if object_id(N'dbo.CalcDistance','FN') is not null drop function dbo.CalcDistance;
if object_id(N'dbo.CalcDistanceInline','IF') is not null drop function dbo.CalcDistanceInline;
if object_id(N'dbo.CalcDistanceCLR','FS') is not null drop function dbo.CalcDistanceCLR;
if exists(select * from sys.assemblies where name = 'InMemOLTPBoxCLR') drop assembly InMemOLTPBoxCLR;
if exists(select * from sys.procedures p join sys.schemas s on p.schema_id = s.schema_id where s.name = 'dbo' and p.name = 'CalcDistanceInMem') drop proc dbo.CalcDistanceInMem; 
go

create function dbo.CalcDistance
(
	@LoopCnt int
	,@FromLat decimal(9,6)
	,@FromLon decimal(9,6)
	,@ToLat decimal(9,6)
	,@ToLon decimal(9,6)
)
returns float
with schemabinding
as 
begin
	declare	
		@Dist float
		,@Loop int = 0
		,@FromLatR float
		,@FromLonR float
		,@ToLatR float
		,@ToLonR float

	while @Loop < @LoopCnt
	begin
		select 
			@FromLatR = radians(@FromLat)
			,@FromLonR = radians(@FromLon)
			,@ToLatR = radians(@ToLat)
			,@ToLonR = radians(@ToLon)

		set @Dist = 
			2 * asin(
				sqrt(
					power(sin( (@FromLatR - @ToLatR) / 2.), 2) + 
	 				(
						cos(@FromLatR) * 
						cos(@ToLatR) * 
						power(sin((@FromLonR - @ToLonR) / 2.0), 2)
					)
				)
			) * 20001600. / pi()
		select @Loop += 1;
	end	
	return @Dist
end;
go

create proc dbo.CalcDistanceInMem
(
	@LoopCnt int
	,@FromLat decimal(9,6)
	,@FromLon decimal(9,6)
	,@ToLat decimal(9,6)
	,@ToLon decimal(9,6)
	,@Dist float output
)
with native_compilation, schemabinding, execute as owner
as
begin atomic with
(
    transaction isolation level = snapshot
    ,language = N'English'
)
	declare	
		@Loop int = 0
		,@FromLatR float
		,@FromLonR float
		,@ToLatR float
		,@ToLonR float

	while @Loop < @LoopCnt
	begin
		select 
			@FromLatR = radians(@FromLat)
			,@FromLonR = radians(@FromLon)
			,@ToLatR = radians(@ToLat)
			,@ToLonR = radians(@ToLon)

		set @Dist = 
			2 * asin(
				sqrt(
					power(sin( (@FromLatR - @ToLatR) / 2.), 2) + 
	 				(
						cos(@FromLatR) * 
						cos(@ToLatR) * 
						power(sin((@FromLonR - @ToLonR) / 2.0), 2)
					)
				)
			) * 20001600. / pi()
		select @Loop += 1;
	end	
end;
go

/* One call - multiple loops inside */
declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime

select @DT = getdate();
select @Result = dbo.CalcDistance(@LoopCnt,28,-82,29,-83);
select datediff(millisecond,@DT,GetDate()) as [T-SQL Function];
go

declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime

select @DT = getdate();
exec dbo.CalcDistanceInMem @LoopCnt,28,-82,29,-83, @Result output
select datediff(millisecond,@DT,GetDate()) as [Natively Compiled Proc];
go

/* Multiple Calls in the Loop */
declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime
	,@I int = 0

select @DT = getdate();
while @I < @LoopCnt
begin
	select @Result = dbo.CalcDistance(1,28,-82,29,-83);
	select @I += 1;
end
select datediff(millisecond,@DT,GetDate()) as [T-SQL Function];
go

declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime
	,@I int = 0

select @DT = getdate();
while @I < @LoopCnt
begin
	exec dbo.CalcDistanceInMem 1,28,-82,29,-83, @Result output
	select @I += 1;
end
select datediff(millisecond,@DT,GetDate()) as [Natively Compiled Proc];
go


/* Let's check performance of Inline Function */
create function dbo.CalcDistanceInline
(
	@FromLat decimal(9,6)
	,@FromLon decimal(9,6)
	,@ToLat decimal(9,6)
	,@ToLon decimal(9,6)
)
returns table
as
return
(
	with Rads(FromLatR, FromLonR, ToLatR, ToLonR)
	as 
	 (
		select 
			radians(@FromLat), radians(@FromLon),
			radians(@ToLat), radians(@ToLon)
	)
	select	
		2 * asin(
			sqrt(
				power(sin((FromLatR - ToLatR) / 2.), 2) + 
	 			(
					cos(FromLatR) * 
					cos(ToLatR) * 
					power(sin((FromLonR - ToLonR) / 2.0),2)
				)
			)
		) * 20001600. / pi() as Distance
	   from Rads
);
go

declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime
	,@I int = 0

select @DT = getdate();
while @I < @LoopCnt
begin
	exec dbo.CalcDistanceInMem 1,28,-82,29,-83, @Result output
	select @I += 1;
end
select datediff(millisecond,@DT,GetDate()) as [Natively Compiled Proc];
go


declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime
	,@I int = 0

select @DT = getdate();
while @I < @LoopCnt
begin
	select @Result = Distance
	from dbo.CalcDistanceInline(28,-82,29,-83);
	select @I += 1;
end
select datediff(millisecond,@DT,GetDate()) as [Inline Function];
go


create assembly [InMemOLTPBoxCLR]
authorization [dbo]
from ;
go

create function [dbo].[CalcDistanceCLR]
(@loopCnt int, @fromLat float, @fromLon float, @toLat float, @toLon float)
returns float
as
	external name [InMemOLTPBoxCLR].[UserDefinedFunctions].[CalcDistanceCLR];
go

/****************************************************************************
[Microsoft.SqlServer.Server.SqlFunction(
    IsDeterministic = true, IsPrecise = false,
    SystemDataAccess = SystemDataAccessKind.None)]
public static SqlDouble CalcDistanceCLR
(
	SqlInt32 loopCnt,
    SqlDouble fromLat, SqlDouble fromLon,
    SqlDouble toLat, SqlDouble toLon
)
{
    double fromLatR, fromLonR, toLatR, toLonR, result = 0;

    for (int i = 0; i < loopCnt.Value; i++)
    {
        fromLatR = Math.PI / 180 * fromLat.Value;
        fromLonR = Math.PI / 180 * fromLon.Value;
        toLatR = Math.PI / 180 * toLat.Value;
        toLonR = Math.PI / 180 * toLon.Value;
        result =
            2 * Math.Asin(
                Math.Sqrt(
                    Math.Pow(Math.Sin((fromLatR - toLatR) / 2.0), 2) +
                    (
                         Math.Cos(fromLatR) * Math.Cos(toLatR) *
                         Math.Pow(Math.Sin((fromLonR - toLonR) / 2.0), 2)
                    )
            )) * 20001600.0 / Math.PI;
    };
    return new SqlDouble(result);
}
****************************************************************************/

declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime
	,@I int = 0

select @DT = getdate();
while @I < @LoopCnt
begin
	exec dbo.CalcDistanceInMem 1,28,-82,29,-83, @Result output
	select @I += 1;
end
select datediff(millisecond,@DT,GetDate()) as [Natively Compiled Proc];
go

declare
	@Result float 
	,@LoopCnt int = 10000
	,@DT datetime
	,@I int = 0

select @DT = getdate();
while @I < @LoopCnt
begin
	select @Result =  dbo.CalcDistanceCLR(1,28,-82,29,-83)
	select @I += 1;
end
select datediff(millisecond,@DT,GetDate()) as [CLR Proc];
go